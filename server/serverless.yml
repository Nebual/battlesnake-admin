# serverless.yml

service: battlesnake-admin

provider:
  name: aws
  runtime: nodejs6.10
  stage: ${opt:stage, 'local'}
  region: us-west-2
  # This is fine for offline, but should really use SSM
  # https://serverless.com/framework/docs/providers/aws/guide/variables/#reference-variables-using-the-ssm-parameter-store
  environment: ${file(../scripts/env-${self:provider.stage}.yml)}
  vpc: 
    securityGroupIds:
      - sg-c5bda7b9
      - sg-4b5fba34
      - sg-725db80d
    subnetIds:
      - subnet-4a24ee10
      - subnet-01e50078
      - subnet-695f5b21

plugins:
  - serverless-webpack
  - serverless-offline
  
functions:
  app:
    handler: entry.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'

# Include dependencies from package.json
custom:
  webpackIncludeModules: true
  webpack: webpack.config.js
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: users
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    tournamentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: tournaments
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    teamTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: teams
        AttributeDefinitions:
          - AttributeName: captainId
            AttributeType: S
        KeySchema:
          - AttributeName: captainId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
